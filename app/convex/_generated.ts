/* eslint-disable */
// Generated by @convex-dev/cli@0.0.67
// based on the contents of this directory.
// To regenerate, run `convex codegen`.
import type addChannel from "./addChannel";
import type addVote from "./addVote";
import type listChannels from "./listChannels";
import type listMessages from "./listMessages";
import type sendMessage from "./sendMessage";

import type { MutationCtx, QueryCtx } from "@convex-dev/server";
type DropFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never;
type ClientMutation<F extends (first: MutationCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;
type ClientQuery<F extends (first: QueryCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;

type ConvexAPI = {
  queries: {
    listChannels: ClientQuery<typeof listChannels>;
    listMessages: ClientQuery<typeof listMessages>;
  };
  mutations: {
    addChannel: ClientMutation<typeof addChannel>;
    addVote: ClientMutation<typeof addVote>;
    sendMessage: ClientMutation<typeof sendMessage>;
  };
};

import {
  makeUseQuery,
  makeUseMutation,
  makeUseConvex,
} from "@convex-dev/react";

export const useQuery = makeUseQuery<ConvexAPI>();
export const useMutation = makeUseMutation<ConvexAPI>();
export const useConvex = makeUseConvex<ConvexAPI>();
